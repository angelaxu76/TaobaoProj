# -*- coding: utf-8 -*-
"""
ÈÄê SKU ÂØºÂá∫Â∫óÈì∫‰ª∑Ê†ºÔºà‰øÆÊ≠£ÁâàÔºâ
- ‰ªé input_dir Ëá™Âä®ÈÄâÊã©ÊúÄËøë‰øÆÊîπÁöÑ ExcelÔºàÈöèÊú∫Êñá‰ª∂ÂêçÔºâ
- ËØÜÂà´ÂàóÔºöÂÆùË¥ùID(=item_id)„ÄÅÂïÜÂÆ∂ÁºñÁ†Å(=product_code)„ÄÅskuID(=skuid)
- ÂØπ‰∫é‰∏ÄË°å‰∏≠Â§ö‰∏™ skuIDÔºàÈÄóÂè∑/ÂàÜÂè∑/Á©∫Ê†º/Êç¢Ë°åÁ≠âÔºâ‰ºöÂ±ïÂºÄ‰∏∫Â§öË°å
- Âà∞ÂìÅÁâåË°®Êü•ËØ¢ taobao_store_priceÔºåÊü•‰∏çÂà∞ÂàôË∑≥ËøáÔºàÈùûÈ≤∏ËäΩÊ®°ÂºèÔºâ
- ËæìÂá∫‰∏âÂàóÔºöÂÆùË¥ùid | skuid | Ë∞ÉÊï¥Âêé‰ª∑Ê†º
"""
from pathlib import Path
import unicodedata
import re
from typing import List, Dict, Optional, Iterable
import pandas as pd
import psycopg2
from config import BRAND_CONFIG

# ===== ÂàóÂêçÂà´ÂêçÔºöÁ≤æÁ°ÆË¥¥Âêà‰Ω†Á≥ªÁªüÂØºÂá∫ÁöÑË°®Â§¥ =====
COL_ALIASES = {
    "item_id": {"item_id","itemid","ITEM_ID","ÂÆùË¥ùid","ÂÆùË¥ùID","ÂÆùË¥ùId","ÂÆùË¥ù"},
    "product_code": {
        "product_code","productcode","code",
        "ÂïÜÂìÅÁºñÁ†Å","ÂïÜÂìÅCode","‰∫ßÂìÅÁºñÁ†Å","ÁºñÁ†Å","Ë¥ßÂè∑",
        "ÂïÜÂÆ∂ÁºñÁ†Å",              # ‚úÖ ‰Ω†Ë°®Â§¥ÈáåÁöÑÂàó
        "ÂïÜÂÆ∂Ë¥ßÂè∑","Â§ñÈÉ®ÁºñÁ†Å","Â§ñÈÉ®‰ª£Á†Å",
        "outer_id","outerid","outer code","outercode"
    },
    "skuid": {
        "skuid","sku_id","SkuId","SKU_ID","SKUID",
        "skuID",                 # ‚úÖ ‰Ω†Ë°®Â§¥ÈáåÁöÑÂàó
        "Ê∏†ÈÅìË¥ßÂìÅID","Ê∏†ÈÅìskuid","Ë¥ßÂìÅid","Ë¥ßÂìÅID"
    },
}

_SPLIT = re.compile(r"[,\uFF0C;Ôºõ\s\r\n]+")

def _canon(s: str) -> str:
    if s is None: return ""
    s = unicodedata.normalize("NFKC", str(s)).strip()
    s = s.replace("\u00A0", " ").replace("\u200B", "")
    return s.lower()

def _normalize_col(df: pd.DataFrame, want: str) -> str:
    canon2raw = {_canon(c): c for c in df.columns}
    for alias in COL_ALIASES[want]:
        key = _canon(alias)
        if key in canon2raw:
            return canon2raw[key]
    raise KeyError(f"Excel‰∏≠Áº∫Â∞ëÂøÖË¶ÅÂàóÔºö{want}ÔºàÂèØÁî®Âà´ÂêçÔºö{COL_ALIASES[want]}ÔºâÔºåÂΩìÂâçË°®Â§¥Ôºö{list(df.columns)}")

def _find_latest_excel(input_dir: Path) -> Path:
    files = list(input_dir.glob("*.xlsx")) + list(input_dir.glob("*.xls"))
    if not files:
        raise FileNotFoundError(f"ÁõÆÂΩïÊ≤°ÊúâÊâæÂà∞ ExcelÔºö{input_dir}")
    files.sort(key=lambda p: p.stat().st_mtime, reverse=True)
    return files[0]

def _split_skuids(val) -> List[str]:
    if pd.isna(val): return []
    # ÈÅøÂÖçÁßëÂ≠¶ËÆ°Êï∞
    if isinstance(val, (int, float)) and not isinstance(val, bool):
        val = str(int(val))
    s = str(val).strip()
    if not s: return []
    parts = [p.strip() for p in _SPLIT.split(s) if p.strip()]
    # Ê∏ÖÊ¥óÔºöÁßªÈô§ÈùûÂ≠óÊØçÊï∞Â≠óÂíå‰∏ãÂàíÁ∫ø/Áü≠Ê®™Á∫ø‰ª•Â§ñÂ≠óÁ¨¶
    parts = [re.sub(r"[^\w\-]", "", p) for p in parts if p]
    return [p for p in parts if p]

def _chunked(it: Iterable, size: int):
    buf = []
    for x in it:
        buf.append(x)
        if len(buf) >= size:
            yield buf; buf = []
    if buf: yield buf

def _fetch_prices(conn, table: str, codes: List[str]) -> Dict[str, Optional[float]]:
    prices: Dict[str, Optional[float]] = {}
    missing = list(dict.fromkeys(codes))  # ÂéªÈáç‰ΩÜ‰øùÊåÅÈ°∫Â∫è

    # ‰ºòÂÖà product_code
    with conn.cursor() as cur:
        try:
            for chunk in _chunked(missing, 1000):
                cur.execute(
                    f"SELECT product_code, taobao_store_price FROM {table} "
                    f"WHERE product_code = ANY(%s)", (chunk,))
                for code, price in cur.fetchall():
                    prices[str(code)] = None if price is None else float(price)
            missing = [c for c in missing if c not in prices]
        except Exception:
            # Ë°®ÂèØËÉΩÊ≤°Êúâ product_code ÂàóÔºåÂøΩÁï•ËøõÂÖ•ÂÖúÂ∫ï
            pass

        # ÂÖúÂ∫ïÔºöÊüê‰∫õÂéÜÂè≤Ë°®ÊääÁºñÁ†ÅÊîæ product_name
        if missing:
            try:
                for chunk in _chunked(missing, 1000):
                    cur.execute(
                        f"SELECT product_name, taobao_store_price FROM {table} "
                        f"WHERE product_name = ANY(%s)", (chunk,))
                    for code, price in cur.fetchall():
                        prices[str(code)] = None if price is None else float(price)
            except Exception:
                pass

    return prices

import math
import pandas as pd

def _to_text(v: object) -> str:
    """Êää‰ªªÊÑèExcelÂçïÂÖÉÊ†ºÂÆâÂÖ®ËΩ¨ÊàêÂ≠óÁ¨¶‰∏≤ÔºöÁ©∫->''ÔºõÊï∞ÂÄº->‰∏çÂ∏¶ÁßëÂ≠¶ËÆ°Êï∞ÔºõÂÖ∂‰Ωô->str()."""
    if v is None or (isinstance(v, float) and (math.isnan(v))):
        return ""
    # pandas ‰ºöÊääÊï¥Êï∞Âûã/ÈïøÊï∞Â≠óËØªÊàê floatÔºõËøôÈáåÁ°Æ‰øù‰∏çËæìÂá∫ÁßëÂ≠¶ËÆ°Êï∞
    if isinstance(v, (int,)):
        return str(v)
    if isinstance(v, float):
        # Â¶ÇÊûúÊòØÊï¥Êï∞ÂÄºÁöÑ floatÔºàÂ¶Ç 1.0ÔºâÔºåËΩ¨ÊàêÊï¥Êï∞Â≠óÁ¨¶‰∏≤
        if v.is_integer():
            return str(int(v))
        # ÈùûÊï¥Êï∞ÔºöÂéªÊéâÁßëÂ≠¶ËÆ°Êï∞ÔºåÊúÄÂ§ö‰øùÁïô15‰ΩçÊúâÊïàÊï∞Â≠ó
        return f"{v:.15g}"
    # pandas ÁöÑ NA/NaT ‰πãÁ±ª
    if isinstance(v, pd._libs.missing.NAType) or (isinstance(v, str) and v.lower() == "nan"):
        return ""
    return str(v)


# ‰∏•Ê†º‰∏ç‰∏¢SKUÁâàÊú¨Ôºö‰ª• skuID ‰∏∫‰∏ªÈîÆËæìÂá∫
def generate_price_excel(
    brand: str,
    input_dir: str | Path,
    output_path: str | Path,
    drop_rows_without_price: bool = True  # Êåâ‰Ω†Ë¶ÅÊ±ÇÔºöÁºñÁ†Å‰∏çÂú®Â∫ìÈáå => Êï¥Ë°åË∑≥Ëøá
) -> Path:
    """
    ‰ª• skuID ‰∏∫‰∏ªËæìÂá∫ÔºöÊØè‰∏™ skuID ‰∏ÄË°åÔºå‰∏î‚ÄúÂÆùË¥ùid„ÄÅ‰ª∑Ê†º‚ÄùÈÉΩÂ°´‰∏ä„ÄÇ
    ÂÅöÊ≥ïÔºö
      1) ËØªÂèñÁõÆÂΩï‰∏≠ÊúÄËøëÁöÑ ExcelÔºàÁ≥ªÁªüÂØºÂá∫Ë°®Â§¥ÔºöÂÆùË¥ùID/ÂïÜÂÆ∂ÁºñÁ†Å/skuIDÔºâ
      2) ÂØπ„ÄêÂÆùË¥ùID„ÄÅÂïÜÂÆ∂ÁºñÁ†Å„ÄëÂÅöÂêë‰∏ãÂ°´ÂÖÖÔºàffillÔºâÔºåËß£ÂÜ≥ÂêéÁª≠Ë°åÁïôÁ©∫ÈóÆÈ¢ò
      3) ÈÄêË°åÔºàÊàñÊåâÂçïÂÖÉÊ†ºÂÜÖÂ§ö‰∏™skuÊãÜÂàÜÔºâ‰∫ßÂá∫ (item_id, product_code, skuid)
      4) Êåâ product_code Êü•Â∫ìÂæó taobao_store_priceÔºåÂπ∂Â∑¶ËøûÊé•
      5) ÈªòËÆ§‰∏¢ÂºÉÊó†‰ª∑Ë°åÔºàÁºñÁ†Å‰∏çÂú®Â∫ìÈáåÔºâÔºå‰øùÁïôÁöÑÊØèË°åÈÉΩÂ°´Â•Ω ÂÆùË¥ùid & ‰ª∑Ê†º
      6) ËæìÂá∫‰∏âÂàóÔºöÂÆùË¥ùid | skuid | Ë∞ÉÊï¥Âêé‰ª∑Ê†º
    """
    brand = brand.lower().strip()
    if brand not in BRAND_CONFIG:
        raise ValueError(f"Êú™Áü•ÂìÅÁâåÔºö{brand}")

    cfg = BRAND_CONFIG[brand]
    table = cfg["TABLE_NAME"]
    pg    = cfg["PGSQL_CONFIG"]

    input_dir = Path(input_dir)
    output_path = Path(output_path)
    output_path.parent.mkdir(parents=True, exist_ok=True)

    # 1) ËØªÂÖ•ÂéüË°®Ôºà‰øùÁïôÂéüÂßãÁ±ªÂûãÔºåÂêéÈù¢Áªü‰∏ÄËΩ¨ÊñáÊú¨Ôºâ
    excel_file = _find_latest_excel(input_dir)
    print(f"üìÑ ‰ΩøÁî®ËæìÂÖ•Êñá‰ª∂Ôºö{excel_file}")
    df0 = pd.read_excel(excel_file, dtype=object)

    # 2) ÂàóÂêçÂÆö‰Ωç
    col_item = _normalize_col(df0, "item_id")       # ÂÆùË¥ùID
    col_code = _normalize_col(df0, "product_code")  # ÂïÜÂÆ∂ÁºñÁ†Å
    col_sku  = _normalize_col(df0, "skuid")         # skuID

    # 2.1) Âêë‰∏ãÂ°´ÂÖÖÂÆùË¥ùID/ÂïÜÂÆ∂ÁºñÁ†Å ‚Äî‚Äî ÂÖ≥ÈîÆ‰øÆÂ§çÁÇπ
    def _prep_ffill(col: str):
        s = df0[col].apply(lambda v: _to_text(v).strip())
        s = s.replace("", pd.NA)
        return s.ffill().fillna("")  # È°∂ÈÉ®Ëã•‰∏∫Á©∫‰ªçÁªôÁ©∫‰∏≤

    df0[col_item] = _prep_ffill(col_item)
    df0[col_code] = _prep_ffill(col_code)

    # 3) ÈÄêË°å‰∫ßÂá∫ÔºàÊîØÊåÅ‰∏ÄÊ†ºÂ§ö‰∏™skuÁöÑÊÉÖÂÜµÔºâ
    rows = []
    for _, r in df0.iterrows():
        item_id = _to_text(r.get(col_item)).strip()
        code    = _to_text(r.get(col_code)).strip()
        skus    = _split_skuids(r.get(col_sku))
        if not skus:
            continue
        for sid in skus:
            sid = _to_text(sid).strip()
            if sid:
                rows.append((item_id, code, sid))

    if not rows:
        raise ValueError("ËæìÂÖ•ExcelÊó†ÊúâÊïàËÆ∞ÂΩïÔºàÊ£ÄÊü•ÂÆùË¥ùID/ÂïÜÂÆ∂ÁºñÁ†Å/skuIDÂàó‰∏éÂÜÖÂÆπÔºâ„ÄÇ")

    df_expanded = pd.DataFrame(rows, columns=["ÂÆùË¥ùid", "product_code", "skuid"])
    print(f"üîé Â±ïÂºÄÂêéSKUË°åÊï∞: {len(df_expanded)} | ÂÆùË¥ùÊï∞: {df_expanded['ÂÆùË¥ùid'].nunique()} | ÂîØ‰∏ÄSKUÊï∞: {df_expanded['skuid'].nunique()}")

    # 4) Êü•‰ª∑Âπ∂Â∑¶ËøûÊé•Ôºà‰∏ç‰∏¢SKUÔºâ
    codes = list(dict.fromkeys(df_expanded["product_code"].tolist()))
    conn = psycopg2.connect(**pg)
    try:
        price_map = _fetch_prices(conn, table, codes)  # {code: price Êàñ None}
    finally:
        conn.close()

    df_price = pd.DataFrame(
        [{"product_code": k, "Ë∞ÉÊï¥Âêé‰ª∑Ê†º": v} for k, v in price_map.items()],
        columns=["product_code", "Ë∞ÉÊï¥Âêé‰ª∑Ê†º"]
    )
    df_merged = df_expanded.merge(df_price, on="product_code", how="left")

    # 5) ‰∏¢ÂºÉÊó†‰ª∑ÔºàÁºñÁ†Å‰∏çÂú®Â∫ìÔºâÊàñ‰øùÁïôÁ©∫‰ª∑ ‚Äî‚Äî ÈªòËÆ§Êåâ‰Ω†Ë¶ÅÊ±Ç‰∏¢ÂºÉ
    if drop_rows_without_price:
        before = len(df_merged)
        df_out = df_merged[df_merged["Ë∞ÉÊï¥Âêé‰ª∑Ê†º"].notna()].copy()
        print(f"üßπ Ë∑≥Ëøá(Êó†‰ª∑/ÈùûÈ≤∏ËäΩ)SKUË°å: {before - len(df_out)}")
    else:
        df_out = df_merged.copy()
        df_out.loc[df_out["Ë∞ÉÊï¥Âêé‰ª∑Ê†º"].isna(), "Ë∞ÉÊï¥Âêé‰ª∑Ê†º"] = ""

    # 6) Âè™ÂØºÂá∫‰∏âÂàóÔºõÊØè‰∏™ skuID ‰∏ÄË°åÔºå‰∏î‚ÄúÂÆùË¥ùid / ‰ª∑Ê†º‚ÄùÂ∑≤Â°´Â•Ω
    df_out = df_out[["ÂÆùË¥ùid", "skuid", "Ë∞ÉÊï¥Âêé‰ª∑Ê†º"]]
    df_out.to_excel(output_path, index=False)
    print(f"‚úÖ Â∑≤ÂØºÂá∫Ôºö{output_path} | ËæìÂá∫SKUË°åÊï∞: {len(df_out)} | ÂÆùË¥ùÊï∞: {df_out['ÂÆùË¥ùid'].nunique()}")
    return output_path





if __name__ == "__main__":
    # ÁÆÄÂçïÂëΩ‰ª§Ë°åÔºöpython generate_taobao_store_price_for_import_excel.py camper D:\in D:\out\camper_prices.xlsx
    import sys, traceback
    if len(sys.argv) >= 4:
        try:
            generate_price_excel(sys.argv[1], sys.argv[2], sys.argv[3])
        except Exception as e:
            print("‚ùå Â§±Ë¥•Ôºö", e); traceback.print_exc()
    else:
        print("Áî®Ê≥ï: python this_script.py <brand> <input_dir> <output_excel_path>")
